type MintError = variant { Cap : nat; End : nat64; Start : nat64; Unmintable };
type OrdError = variant {
  Rpc : RpcError;
  Overflow;
  Params : text;
  NotEnoughConfirmations;
  RuneNotFound;
  Index : MintError;
  WrongBlockHash : text;
  Unrecoverable;
  OutPointNotFound;
  Recoverable : record { height : nat32; depth : nat32 };
  WrongBlockMerkleRoot : text;
};
type OrdEtching = record { confirmations : nat32; rune_id : text };
type OrdRuneBalance = record {
  id : text;
  confirmations : nat32;
  divisibility : nat8;
  amount : nat;
  symbol : opt text;
};
type OrdRuneEntry = record {
  confirmations : nat32;
  mints : nat;
  terms : opt OrdTerms;
  etching : text;
  turbo : bool;
  premine : nat;
  divisibility : nat8;
  spaced_rune : text;
  number : nat64;
  timestamp : nat64;
  block : nat64;
  burned : nat;
  symbol : opt text;
};
type OrdTerms = record {
  cap : opt nat;
  height : record { opt nat64; opt nat64 };
  offset : record { opt nat64; opt nat64 };
  amount : opt nat;
};
type Result = variant { Ok : opt OrdEtching; Err : OrdError };
type Result_1 = variant { Ok : record { nat32; text }; Err : OrdError };
type Result_2 = variant { Ok : OrdRuneEntry; Err : OrdError };
type Result_3 = variant { Ok : vec RuneBalance; Err : OrdError };
type Result_4 = variant { Ok : vec opt vec OrdRuneBalance; Err : OrdError };
type Result_5 = variant { Ok; Err : text };
type RpcError = variant {
  Io : record { text; text; text };
  Endpoint : record { text; text; text };
  Decode : record { text; text; text };
};
type RuneBalance = record { id : RuneId; balance : nat };
type RuneId = record { tx : nat32; block : nat64 };
service : (text) -> {
  get_etching : (text) -> (Result) query;
  get_height : () -> (Result_1) query;
  get_rune_entry_by_rune_id : (text) -> (Result_2) query;
  get_runes_by_utxo : (text, nat32) -> (Result_3) query;
  get_subscribers : () -> (vec text) query;
  query_runes : (vec text) -> (Result_4) query;
  remove_subscriber : (nat64) -> (Result_5);
  set_url : (text) -> (Result_5);
}
