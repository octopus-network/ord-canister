type MintError = variant { Cap : nat; End : nat64; Start : nat64; Unmintable };
type OrdError = variant {
  Rpc : RpcError;
  Overflow;
  Params : text;
  NotEnoughConfirmations;
  Index : MintError;
  WrongBlockHash : text;
  Unrecoverable;
  OutPointNotFound;
  Recoverable : record { height : nat32; depth : nat32 };
  WrongBlockMerkleRoot : text;
};
type OrdRuneBalance = record {
  id : text;
  confirmations : nat32;
  divisibility : nat8;
  amount : nat;
  symbol : opt text;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : record { nat32; text }; Err : OrdError };
type Result_2 = variant { Ok : vec RuneBalance; Err : OrdError };
type Result_3 = variant { Ok : vec opt vec OrdRuneBalance; Err : OrdError };
type RpcError = variant {
  Io : record { text; text; text };
  Endpoint : record { text; text; text };
  Decode : record { text; text; text };
};
type RuneBalance = record { id : RuneId; balance : nat };
type RuneId = record { tx : nat32; block : nat64 };
service : (text) -> {
  add_subscriber : (text) -> (Result);
  get_height : () -> (Result_1) query;
  get_runes_by_utxo : (text, nat32) -> (Result_2) query;
  get_subscribers : () -> (vec text) query;
  query_runes : (vec text) -> (Result_3) query;
  set_url : (text) -> (Result);
}
