type BitcoinNetwork = variant { mainnet; regtest; testnet };
type Config = record {
  bitcoin_rpc_url : text;
  network : BitcoinNetwork;
  subscribers : vec principal;
};
type Error = variant { MaxOutpointsExceeded };
type GetEtchingResult = record { confirmations : nat32; rune_id : text };
type Result = variant { Ok : vec opt vec RuneBalance; Err : Error };
type RuneBalance = record {
  confirmations : nat32;
  divisibility : nat8;
  amount : nat;
  rune_id : text;
  symbol : opt text;
};
type RuneEntry = record {
  confirmations : nat32;
  mints : nat;
  terms : opt Terms;
  etching : text;
  turbo : bool;
  premine : nat;
  divisibility : nat8;
  spaced_rune : text;
  number : nat64;
  timestamp : nat64;
  block : nat64;
  burned : nat;
  rune_id : text;
  symbol : opt text;
};
type RunesIndexerArgs = variant { Upgrade : opt UpgradeArgs; Init : Config };
type Terms = record {
  cap : opt nat;
  height : record { opt nat64; opt nat64 };
  offset : record { opt nat64; opt nat64 };
  amount : opt nat;
};
type UpgradeArgs = record {
  bitcoin_rpc_url : opt text;
  subscribers : opt vec principal;
};
service : (RunesIndexerArgs) -> {
  get_etching : (text) -> (opt GetEtchingResult) query;
  get_latest_block : () -> (nat32, text) query;
  get_rune : (text) -> (opt RuneEntry) query;
  get_rune_balances_for_outputs : (vec text) -> (Result) query;
  get_rune_by_id : (text) -> (opt RuneEntry) query;
}
